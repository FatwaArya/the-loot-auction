// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  MERCHANT
  USER
}

enum Status {
  AVAILABLE
  SOLD
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ItemsBidders {
  id              String         @id @default(cuid())
  bidAmount       Int
  bidder          User           @relation(fields: [bidderId], references: [id])
  bidderId        String         @map("bidderId")
  MerchantItems   MerchantItems? @relation(fields: [merchantItemsId], references: [id])
  merchantItemsId String?
}

model MerchantItems {
  id          String         @id @default(cuid())
  bidders     ItemsBidders[]
  createdAt   DateTime       @default(now())
  description String
  image       String?
  itemName    String?
  price       Int
  quantity    Int
  status      Status         @default(AVAILABLE)
  updatedAt   DateTime       @updatedAt
  User        User?          @relation(fields: [userId], references: [id])
  userId      String?
  OwnedItems  OwnedItems[]
}

// item owned by user from merchantItems
model OwnedItems {
  id              String         @id @default(cuid())
  createdAt       DateTime       @db.Date
  updatedAt       DateTime       @db.Date
  MerchantItems   MerchantItems? @relation(fields: [merchantItemsId], references: [id])
  merchantItemsId String?
  User            User?          @relation(fields: [userId], references: [id])
  userId          String?
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  merchantItems MerchantItems[]
  ownedItems    OwnedItems[]
  ItemsBidders  ItemsBidders[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
